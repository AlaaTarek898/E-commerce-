{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///D:/Alaa/NEXT/next/src/lib/auth.ts"],"sourcesContent":["import type { AuthOptions } from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\n\r\nexport const authOptions: AuthOptions = {\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"text\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        const res = await fetch(\"https://ecommerce.routemisr.com/api/v1/auth/signin\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            email: credentials?.email,\r\n            password: credentials?.password,\r\n          }),\r\n        });\r\n\r\n        const user = await res.json();\r\n\r\n        // Ù„Ùˆ Ø§Ù„Ù„ÙˆØ¬ÙŠÙ† Ù†Ø§Ø¬Ø­\r\n        if (res.ok && user?.token) {\r\n          // Ù‡Ù†Ø§ Ø¨Ù†Ø±Ø¬Ø¹ ÙƒÙ„ Ø§Ù„Ø¯Ø§ØªØ§ Ø§Ù„Ù„ÙŠ Ø¬Øª Ù…Ù† Ø§Ù„Ù€ API\r\n          return {\r\n            id: user.user._id,\r\n            name: user.user.name,\r\n            email: user.user.email,\r\n            token: user.token, // ðŸ‘ˆ Ø£Ù‡Ù… Ø­Ø§Ø¬Ø©\r\n          };\r\n        }\r\n\r\n        // Ù„Ùˆ Ø­ØµÙ„ Ø®Ø·Ø£\r\n        throw new Error(user?.message || \"Invalid credentials\");\r\n      },\r\n    }),\r\n  ],\r\n\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n\r\n  pages: {\r\n    signIn: \"/login\",\r\n  },\r\n\r\n  callbacks: {\r\n    // ØªØ®Ø²ÙŠÙ† Ø§Ù„Ù€ token Ø¯Ø§Ø®Ù„ Ø§Ù„Ù€ JWTcallbacks: {\r\n  async jwt({ token, user }) {\r\n    // Ø£ÙˆÙ„ Ù…Ø±Ø©: ÙˆÙ‚Øª Ø§Ù„Ù„ÙˆØ¬Ù†\r\n    if (user) {\r\n      token.token = user.token; // Ø®Ø²Ù‘Ù†ÙŠ Ø§Ù„ØªÙˆÙƒÙ† Ø§Ù„Ù„ÙŠ Ø¬Ø§ÙŠ Ù…Ù† API\r\n    }\r\n    return token;\r\n  },\r\n  async session({ session, token }) {\r\n    session.token = token.token; // Ù…Ø±Ù‘Ø±ÙŠÙ‡ Ù„Ù„Ø³ÙŠØ´Ù† Ø¹Ø´Ø§Ù† Ù†Ù‚Ø¯Ø± Ù†Ø¬ÙŠØ¨Ù‡ Ø¨Ø¹Ø¯ÙŠÙ†\r\n    return session;\r\n  },\r\n},\r\n\r\n\r\n  \r\n};\r\n"],"names":[],"mappings":";;;;AACA;;AAEO,MAAM,cAA2B;IACtC,WAAW;QACT,IAAA,qKAAmB,EAAC;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAO;gBACtC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,MAAM,MAAM,MAAM,MAAM,sDAAsD;oBAC5E,QAAQ;oBACR,SAAS;wBAAE,gBAAgB;oBAAmB;oBAC9C,MAAM,KAAK,SAAS,CAAC;wBACnB,OAAO,aAAa;wBACpB,UAAU,aAAa;oBACzB;gBACF;gBAEA,MAAM,OAAO,MAAM,IAAI,IAAI;gBAE3B,kBAAkB;gBAClB,IAAI,IAAI,EAAE,IAAI,MAAM,OAAO;oBACzB,yCAAyC;oBACzC,OAAO;wBACL,IAAI,KAAK,IAAI,CAAC,GAAG;wBACjB,MAAM,KAAK,IAAI,CAAC,IAAI;wBACpB,OAAO,KAAK,IAAI,CAAC,KAAK;wBACtB,OAAO,KAAK,KAAK;oBACnB;gBACF;gBAEA,aAAa;gBACb,MAAM,IAAI,MAAM,MAAM,WAAW;YACnC;QACF;KACD;IAED,SAAS;QACP,UAAU;IACZ;IAEA,QAAQ,QAAQ,GAAG,CAAC,eAAe;IAEnC,OAAO;QACL,QAAQ;IACV;IAEA,WAAW;QACT,2CAA2C;QAC7C,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,sBAAsB;YACtB,IAAI,MAAM;gBACR,MAAM,KAAK,GAAG,KAAK,KAAK,EAAE,+BAA+B;YAC3D;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,QAAQ,KAAK,GAAG,MAAM,KAAK,EAAE,sCAAsC;YACnE,OAAO;QACT;IACF;AAIA","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///D:/Alaa/NEXT/next/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["'use server'\r\n\r\nimport { getServerSession } from \"next-auth\"\r\nimport { authOptions } from \"@/lib/auth\"\r\n\r\nexport default async function GetMyToken() {\r\n  const session = await getServerSession(authOptions)\r\n  return session?.token || null\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;AACA;;;;;AAEe,eAAe;IAC5B,MAAM,UAAU,MAAM,IAAA,2JAAgB,EAAC,mIAAW;IAClD,OAAO,SAAS,SAAS;AAC3B;;;IAH8B;;AAAA,iPAAA","debugId":null}}]
}