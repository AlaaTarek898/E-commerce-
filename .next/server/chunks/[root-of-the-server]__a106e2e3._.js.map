{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":["file:///D:/Alaa/NEXT/next/src/lib/auth.ts"],"sourcesContent":["import type { AuthOptions } from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\n\r\nexport const authOptions: AuthOptions = {\r\n  providers: [\r\n   CredentialsProvider({\r\n      name: \"Credentials\",\r\n\r\n      credentials: {\r\n        email: {\r\n          label: \"email\",\r\n          type: \"text\",\r\n          placeholder: \"alaatarek2040@gmail.com\",\r\n        },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials, req) {\r\n        const res = await fetch(\r\n          \"https://ecommerce.routemisr.com/api/v1/auth/signin\",\r\n          {\r\n            method: \"POST\",\r\n            body: JSON.stringify(credentials),\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n          }\r\n        );\r\n        const user = await res.json();\r\n\r\n        // If no error and we have user data, return it\r\n        if (res.ok && user) {\r\n          return user;\r\n        }\r\n        // Return null if user data could not be retrieved\r\n        return null;\r\n      },\r\n    }),\r\n  ],\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n  pages: {\r\n    signIn: \"/login\",\r\n  },\r\n  callbacks: {\r\n    async session({ session, token, user }) {\r\n      return { ...session, ...token, ...user };\r\n    },\r\n    async jwt({ token, user }) {\r\n      return { ...token, ...user };\r\n    },\r\n  },\r\n};\r\n"],"names":[],"mappings":";;;;AACA;;AAEO,MAAM,cAA2B;IACtC,WAAW;QACV,IAAA,qKAAmB,EAAC;YACjB,MAAM;YAEN,aAAa;gBACX,OAAO;oBACL,OAAO;oBACP,MAAM;oBACN,aAAa;gBACf;gBACA,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW,EAAE,GAAG;gBAC9B,MAAM,MAAM,MAAM,MAChB,sDACA;oBACE,QAAQ;oBACR,MAAM,KAAK,SAAS,CAAC;oBACrB,SAAS;wBAAE,gBAAgB;oBAAmB;gBAChD;gBAEF,MAAM,OAAO,MAAM,IAAI,IAAI;gBAE3B,+CAA+C;gBAC/C,IAAI,IAAI,EAAE,IAAI,MAAM;oBAClB,OAAO;gBACT;gBACA,kDAAkD;gBAClD,OAAO;YACT;QACF;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE;YACpC,OAAO;gBAAE,GAAG,OAAO;gBAAE,GAAG,KAAK;gBAAE,GAAG,IAAI;YAAC;QACzC;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,OAAO;gBAAE,GAAG,KAAK;gBAAE,GAAG,IAAI;YAAC;QAC7B;IACF;AACF","debugId":null}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":["file:///D:/Alaa/NEXT/next/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import { authOptions } from \"@/lib/auth\";\r\nimport NextAuth from \"next-auth\";\r\n\r\n\r\nconst handler = NextAuth(authOptions);\r\n\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAGA,MAAM,UAAU,IAAA,kJAAQ,EAAC,mIAAW","debugId":null}}]
}